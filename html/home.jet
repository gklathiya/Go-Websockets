<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
        integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        .chatbox {
            outline: 1px solid silver;
            min-height: 160px;
            padding: 0.5em;
        }
    </style>
    <title>Home</title>
</head>

<body>
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 calss="mt-3">WebSocket Chat App in Go</h1>
                <hr>
            </div>
            <div class="row">
                <div class="col-md-8">
                    <h3>Chat</h3>

                    <div class="form-group">
                        <label for="username">Username:</label>
                        <input type="text" name="username" id="username" class="form-control" autocomplete="off">
                    </div>
                    <div class="form-group">
                        <label for="message">Message:</label>
                        <input type="text" name="message" id="message" class="form-control" autocomplete="off">
                    </div>
                    <hr>
                    <a href="javascript:void(0)" class="btn btn-outline-primary" id="sendBtn">Send</a>
                    <input type="hidden" name="action" id="action">
                    <div id="status" class="mt-2 float-end"></div>
                    <div id="output" class="chatbox mt-3"></div>
                </div>
                <div class="col-md-4">
                    <h3>Who's Online</h3>
                    <ul id="onlineuser"></ul>
                </div>
            </div>
        </div>
        <div>
</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
    crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
    integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="/static/reconnecting-websocket.min.js"></script>
<script>
    let socket = null;
    let output = document.getElementById("output");
    let userField = document.getElementById("username");
    let messageField = document.getElementById("message");

    window.onbeforeunload = () => {
        console.log("Leaving..")
        let jsonData = {};
        jsonData["action"] = "left";
        socket.send(JSON.stringify(jsonData));
    }
    document.addEventListener("DOMContentLoaded", function () {
        socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws", null, { debug: true, reconnectInterval: 3000 });  // WebSocket if we user standard JS
        const offline = `<span class="badge bg-danger">Not Connected </span>`
        const online = `<span class="badge bg-success">Connected </span> <br>`
        let statusDiv = document.getElementById("status");

        socket.onopen = () => {
            console.log("Successfully connected");
            statusDiv.innerHTML = online;
        }
        socket.onclose = () => {
            console.log("Connection Close");
            statusDiv.innerHTML = offline;
        }

        socket.onerror = error => {
            console.log("There is an error");
            statusDiv.innerHTML = offline;
        }

        socket.onmessage = msg => {
            let data = JSON.parse(msg.data);
            // console.log(data);
            console.log("Action is", data.action);
            switch (data.action) {
                case "list_users":
                    let ul = document.getElementById("onlineuser")
                    while (ul.firstChild) ul.removeChild(ul.firstChild);

                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach(item => {
                            let li = document.createElement("li");
                            li.appendChild(document.createTextNode(item));
                            ul.appendChild(li);
                        });
                    }
                    break;
                case "broadcast":
                    output.innerHTML = output.innerHTML + data.message + "<br>";

            }

        }


        userField.addEventListener("change", function () {
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = this.value;
            socket.send(JSON.stringify(jsonData));
        });

        messageField.addEventListener("keydown", event => {
            if (event.code === "Enter") {
                if (!socket) {
                    console.log("No Connection");
                    return false;
                }

                if ((userField.value === "") || (messageField.value === "")) {
                    errorMessage("Fill out USER and Message");
                    return false;
                } else {
                    sendMessage();
                }
                event.preventDefault();
                event.stopPropagation();
            }
        });

        document.getElementById("sendBtn").addEventListener("click", () => {
            if ((userField.value === "") || (messageField.value === "")) {
                errorMessage("Fill out USER and Message");
                return false;
            } else {
                sendMessage();
            }
        })
    });

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = userField.value;
        jsonData["message"] = messageField.value;
        socket.send(JSON.stringify(jsonData));
        messageField.value = "";

    }

    function errorMessage(msg) {
        notie.alert({
            type: 'error', // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
            text: msg,
        })
    }

</script>

</html>